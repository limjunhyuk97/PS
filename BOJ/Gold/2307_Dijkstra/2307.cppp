#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#define MAXVERTEX 1005
#define INF 1e9
using namespace std;

struct edge {
	int end;
	int weight;
	bool operator< (const edge& other) const {
		return weight > other.weight;
	}
};

int M, N, u, v, w;
int initialDistance, operation, ans;
int path[MAXVERTEX], beforeV[MAXVERTEX];
vector<int> trace;
vector<edge> edges[MAXVERTEX];

// i : 0 , 1
int Dijkstra(int s, int e, int c) {

	priority_queue<edge> nextE;
	int se, es, tmp;

	if (c == 1) {
		for (int i = 0; i < edges[s].size(); ++i) {
			if (edges[s][i].end == e) {
				se = i;
				tmp = edges[s][i].weight;
				edges[s][i].weight = INF;
			}
		}
		for (int i = 0; i < edges[e].size(); ++i) {
			if (edges[e][i].end == s) {
				es = i;
				tmp = edges[e][i].weight;
				edges[e][i].weight = INF;
			}
		}
	}

	for (int i = 0; i < MAXVERTEX; ++i)
		path[i] = INF;
	path[1] = 0;

	nextE.push({ 1, 0 });

	while (!nextE.empty()) {

		edge cur = nextE.top(); nextE.pop();

		if (path[cur.end] < cur.weight) continue;
		for (int i = 0; i < edges[cur.end].size(); ++i) {
			if (path[edges[cur.end][i].end] > path[cur.end] + edges[cur.end][i].weight) {
				path[edges[cur.end][i].end] = path[cur.end] + edges[cur.end][i].weight;
				nextE.push({ edges[cur.end][i].end , path[edges[cur.end][i].end] });
				if (c == 0) beforeV[edges[cur.end][i].end] = cur.end;
			}
		}

	}

	if (c == 1) {
		edges[s][se].weight = tmp;
		edges[e][es].weight = tmp;
	}

	return path[N];

}

void makeTrace(int e) {

	for (; beforeV[e] != 1; e = beforeV[e]) {
		trace.push_back(e);
	}
	trace.push_back(e);
	trace.push_back(1);

}

int main(void) {

	ios::sync_with_stdio(false);
	cin.tie(NULL); cout.tie(NULL);

	cin >> N >> M;
	beforeV[1] = 1;
	for (int i = 0; i < M; ++i) {
		cin >> u >> v >> w;
		edges[u].push_back({ v, w });
		edges[v].push_back({ u, w });
	}

	initialDistance = Dijkstra(1, N, 0);
	makeTrace(N);

	for (int i = 0; i < trace.size() - 1; ++i) {
		operation = Dijkstra(trace[i], trace[i + 1], 1);
		if (operation == INF) { 
			ans = -1;
			break; 
		}
		else {
			ans = max(ans, operation - initialDistance);
		}
	}

	cout << ans << '\n';
		
	return 0;
}
